{
  "address": "0x7fD8b6dABFB3192Ff425399a89d56895f67731E0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        }
      ],
      "name": "domainNotActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        }
      ],
      "name": "invalidDomain",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "invalidNonce",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "old",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newer",
          "type": "uint256"
        }
      ],
      "name": "invalidNonceIncrement",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum IMultipass.InvalidQueryReasons",
          "name": "reason",
          "type": "uint8"
        }
      ],
      "name": "invalidQuery",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registrar",
          "type": "address"
        }
      ],
      "name": "invalidRegistrar",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "invalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "newName",
          "type": "bytes32"
        }
      ],
      "name": "invalidnameChange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "isActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "mathOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "nameExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "paymendFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "paymentTooLow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint96",
              "name": "nonce",
              "type": "uint96"
            },
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibMultipass.Record",
          "name": "newRecord",
          "type": "tuple"
        }
      ],
      "name": "recordExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referrerReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referralDiscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "referralRewardsTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "referredSelf",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signatureDeadline",
          "type": "uint256"
        }
      ],
      "name": "signatureExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "targetDomain",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibMultipass.NameQuery",
          "name": "query",
          "type": "tuple"
        }
      ],
      "name": "userNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        }
      ],
      "name": "DomainActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        }
      ],
      "name": "DomainDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "DomainFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registrar",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "renewalFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referralDiscount",
          "type": "uint256"
        }
      ],
      "name": "InitializedDomain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        }
      ],
      "name": "ReferralProgramChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint96",
              "name": "nonce",
              "type": "uint96"
            },
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibMultipass.Record",
          "name": "refferrer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint96",
              "name": "nonce",
              "type": "uint96"
            },
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibMultipass.Record",
          "name": "newRecord",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        }
      ],
      "name": "Referred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint96",
              "name": "nonce",
              "type": "uint96"
            },
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibMultipass.Record",
          "name": "NewRecord",
          "type": "tuple"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "registrar",
          "type": "address"
        }
      ],
      "name": "RegistrarChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "RenewalFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint96",
              "name": "nonce",
              "type": "uint96"
            },
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibMultipass.Record",
          "name": "newRecord",
          "type": "tuple"
        }
      ],
      "name": "Renewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "fundsWithdawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "nameDeleted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        }
      ],
      "name": "activateDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referrerReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referralDiscount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        }
      ],
      "name": "changeReferralProgram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newRegistrar",
          "type": "address"
        }
      ],
      "name": "changeRegistrar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        }
      ],
      "name": "changeRenewalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        }
      ],
      "name": "deactivateDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "targetDomain",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibMultipass.NameQuery",
          "name": "query",
          "type": "tuple"
        }
      ],
      "name": "deleteName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        }
      ],
      "name": "getDomainState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referrerReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referralDiscount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "registrar",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "ttl",
              "type": "uint24"
            },
            {
              "internalType": "uint256",
              "name": "registerSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renewalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibMultipass.Domain",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getDomainStateById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referrerReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referralDiscount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "registrar",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "ttl",
              "type": "uint24"
            },
            {
              "internalType": "uint256",
              "name": "registerSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renewalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibMultipass.Domain",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registrar",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "renewalFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "referrerReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referralDiscount",
          "type": "uint256"
        }
      ],
      "name": "initializeDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint96",
              "name": "nonce",
              "type": "uint96"
            },
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibMultipass.Record",
          "name": "newRecord",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "registrarSignature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "targetDomain",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibMultipass.NameQuery",
          "name": "referrer",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "referralCode",
          "type": "bytes"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "targetDomain",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibMultipass.NameQuery",
          "name": "query",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint96",
              "name": "nonce",
              "type": "uint96"
            },
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibMultipass.Record",
          "name": "record",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "registrarSignature",
          "type": "bytes"
        }
      ],
      "name": "renewRecord",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "targetDomain",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibMultipass.NameQuery",
          "name": "query",
          "type": "tuple"
        }
      ],
      "name": "resolveRecord",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint96",
              "name": "nonce",
              "type": "uint96"
            },
            {
              "internalType": "bytes32",
              "name": "domainName",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibMultipass.Record",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa942fe08a0151a26d886938e7edd867717a7c2430ac527670c828885470883bf",
  "receipt": {
    "to": null,
    "from": "0x6Cf8d74C7875de8C2FfB09228F4bf2A21b25e583",
    "contractAddress": "0x7fD8b6dABFB3192Ff425399a89d56895f67731E0",
    "transactionIndex": 1,
    "gasUsed": "2909462",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000080000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000080000000000000000",
    "blockHash": "0x6b733c19b66f0a5f2460c1213bde6c167d0c97ffcb45caf618b6a9e14c079d8d",
    "transactionHash": "0xa942fe08a0151a26d886938e7edd867717a7c2430ac527670c828885470883bf",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 129285592,
        "transactionHash": "0xa942fe08a0151a26d886938e7edd867717a7c2430ac527670c828885470883bf",
        "address": "0x7fD8b6dABFB3192Ff425399a89d56895f67731E0",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x6b733c19b66f0a5f2460c1213bde6c167d0c97ffcb45caf618b6a9e14c079d8d"
      }
    ],
    "blockNumber": 129285592,
    "cumulativeGasUsed": "2909462",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4162c9dd9447dcbfe9da076cafcce71b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"}],\"name\":\"domainNotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"}],\"name\":\"invalidDomain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"invalidNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"old\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newer\",\"type\":\"uint256\"}],\"name\":\"invalidNonceIncrement\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IMultipass.InvalidQueryReasons\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"invalidQuery\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"name\":\"invalidRegistrar\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newName\",\"type\":\"bytes32\"}],\"name\":\"invalidnameChange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"isActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mathOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"nameExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"paymendFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"paymentTooLow\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct LibMultipass.Record\",\"name\":\"newRecord\",\"type\":\"tuple\"}],\"name\":\"recordExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"referralRewardsTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"referredSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureDeadline\",\"type\":\"uint256\"}],\"name\":\"signatureExpired\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"targetDomain\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibMultipass.NameQuery\",\"name\":\"query\",\"type\":\"tuple\"}],\"name\":\"userNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"}],\"name\":\"DomainActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"}],\"name\":\"DomainDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"DomainFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"renewalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralDiscount\",\"type\":\"uint256\"}],\"name\":\"InitializedDomain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"ReferralProgramChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibMultipass.Record\",\"name\":\"refferrer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibMultipass.Record\",\"name\":\"newRecord\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"}],\"name\":\"Referred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibMultipass.Record\",\"name\":\"NewRecord\",\"type\":\"tuple\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"name\":\"RegistrarChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"RenewalFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibMultipass.Record\",\"name\":\"newRecord\",\"type\":\"tuple\"}],\"name\":\"Renewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"fundsWithdawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"nameDeleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"}],\"name\":\"activateDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDiscount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"}],\"name\":\"changeReferralProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newRegistrar\",\"type\":\"address\"}],\"name\":\"changeRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"}],\"name\":\"changeRenewalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"}],\"name\":\"deactivateDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"targetDomain\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibMultipass.NameQuery\",\"name\":\"query\",\"type\":\"tuple\"}],\"name\":\"deleteName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"}],\"name\":\"getDomainState\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDiscount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"ttl\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"registerSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct LibMultipass.Domain\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getDomainStateById\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDiscount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"ttl\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"registerSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct LibMultipass.Domain\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewalFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"referrerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDiscount\",\"type\":\"uint256\"}],\"name\":\"initializeDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct LibMultipass.Record\",\"name\":\"newRecord\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"registrarSignature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"targetDomain\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibMultipass.NameQuery\",\"name\":\"referrer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"referralCode\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"targetDomain\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibMultipass.NameQuery\",\"name\":\"query\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct LibMultipass.Record\",\"name\":\"record\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"registrarSignature\",\"type\":\"bytes\"}],\"name\":\"renewRecord\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"targetDomain\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibMultipass.NameQuery\",\"name\":\"query\",\"type\":\"tuple\"}],\"name\":\"resolveRecord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct LibMultipass.Record\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"sirt@peeramid.xyz\",\"details\":\"This contract implements various functions related to the management of domain names and registration records.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"DomainActivated(bytes32)\":{\"details\":\"Emitted when a domain is activated.\",\"params\":{\"domainName\":\"The name of the activated domain.\"}},\"DomainDeactivated(bytes32)\":{\"details\":\"Emitted when a domain is deactivated.\",\"params\":{\"domainName\":\"The name of the deactivated domain.\"}},\"DomainFeeChanged(bytes32,uint256)\":{\"details\":\"Emitted when the fee for a domain is changed.\",\"params\":{\"domainName\":\"The name of the domain.\",\"newFee\":\"The new fee for the domain.\"}},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"InitializedDomain(address,uint256,bytes32,uint256,uint256,uint256)\":{\"details\":\"Initializes a new domain with the specified parameters.\",\"params\":{\"domainName\":\"The name of the domain.\",\"fee\":\"The fee required for registration in the domain.\",\"referralDiscount\":\"The discount for referrals in the domain.\",\"referrerReward\":\"The reward for referring new registrations to the domain.\",\"registrar\":\"The address of the registrar for the domain.\"}},\"ReferralProgramChanged(bytes32,uint256,uint256)\":{\"details\":\"Emitted when the referral program for a domain is changed.\",\"params\":{\"discount\":\"The referral discount amount.\",\"domainName\":\"The domain name.\",\"reward\":\"The referral reward amount.\"}},\"Referred((address,bytes32,bytes32,uint96,bytes32,uint256),(address,bytes32,bytes32,uint96,bytes32,uint256),bytes32)\":{\"details\":\"Emitted when a user is referred.\",\"params\":{\"domainName\":\"The domain name.\",\"newRecord\":\"The new record.\",\"refferrer\":\"The record of the referrer.\"}},\"Registered(bytes32,(address,bytes32,bytes32,uint96,bytes32,uint256))\":{\"details\":\"Emitted when a domain is registered.\",\"params\":{\"NewRecord\":\"The new record.\",\"domainName\":\"The domain name.\"}},\"RegistrarChanged(bytes32,address)\":{\"details\":\"Emitted when a registrar change is requested for a domain.\",\"params\":{\"domainName\":\"The name of the domain.\",\"registrar\":\"The address of the new registrar.\"}},\"RenewalFeeChanged(bytes32,uint256)\":{\"details\":\"Emitted when a domain renewal fee is changed.\",\"params\":{\"domainName\":\"The domain name.\",\"newFee\":\"The new renewal fee.\"}},\"Renewed(address,bytes32,bytes32,(address,bytes32,bytes32,uint96,bytes32,uint256))\":{\"details\":\"Emitted when a user record is renewed.\",\"params\":{\"domainName\":\"The domain name.\",\"id\":\"The ID of the record.\",\"newRecord\":\"The new record.\",\"wallet\":\"The address of the wallet.\"}},\"fundsWithdawn(uint256,address)\":{\"details\":\"returns price for registering name\"},\"nameDeleted(bytes32,address,bytes32,bytes32)\":{\"details\":\"Emitted when a name is deleted.\",\"params\":{\"domainName\":\"The domain name.\",\"id\":\"The ID of the name.\",\"name\":\"The name.\",\"wallet\":\"The address of the wallet.\"}}},\"kind\":\"dev\",\"methods\":{\"activateDomain(bytes32)\":{\"details\":\"Activates LibMultipass.Domain name Requirements:  msg.sender is Owner  Emits an {DomainActivated} event.\"},\"changeFee(bytes32,uint256)\":{\"details\":\"Changes registrar address Requirements:  msg.sender is Owner  Emits an {DomainFeeChanged} event.\"},\"changeReferralProgram(uint256,uint256,bytes32)\":{\"details\":\"executes all pending changes to LibMultipass.Domain that fulfill TTL Requirements:  domainName must be set  referrerFeeShare+referralDiscount cannot be larger than 2^32  Emits an {ReferralProgramChangeRequested} event.\"},\"changeRegistrar(bytes32,address)\":{\"details\":\"Changes registrar address Requirements:  msg.sender is Owner  Emits an {RegistrarChangeRequested} event.\"},\"changeRenewalFee(uint256,bytes32)\":{\"details\":\"changes renewal fee for domain Requirements:  domainName must be set  fee must be set  Emits an {RenewalFeeChangeRequested} event.\"},\"deactivateDomain(bytes32)\":{\"details\":\"Deactivates LibMultipass.Domain name Deactivated LibMultipass.Domain cannot mutate names and will return zeros Requirements:  msg.sender is Owner OR registrar  Emits an {DomainDeactivated} event.\"},\"deleteName((bytes32,address,bytes32,bytes32,bytes32))\":{\"details\":\"deletes name Requirements:  msg.sender is Owner  Emits an {DomainTTLChangeRequested} event.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"getContractState()\":{\"details\":\"returns contract state variables\",\"returns\":{\"_0\":\"(s_numDomains)\"}},\"getDomainState(bytes32)\":{\"details\":\"returns LibMultipass.Domain state variables\",\"params\":{\"domainName\":\"name of the LibMultipass.Domain\"},\"returns\":{\"_0\":\"(name, fee, referrerReward, referralDiscount, isActive, registrar, ttl, registerSize)\"}},\"getDomainStateById(uint256)\":{\"details\":\"Retrieves the domain state by its ID.\",\"params\":{\"id\":\"The ID of the domain.\"},\"returns\":{\"_0\":\"The domain state as a `LibMultipass.Domain` struct.\"}},\"initialize(string,string,address)\":{\"params\":{\"name\":\"The name to initialize the contract with.\",\"owner\":\"The address of the owner of the contract.\",\"version\":\"The version to initialize the contract with.\"}},\"initializeDomain(address,uint256,uint256,bytes32,uint256,uint256)\":{\"details\":\"Initializes new LibMultipass.Domain and configures it's parameters Requirements:  registrar is not zero  domainName is not empty  domainIndex is either zero(auto assign) or can be one of preoccupied LibMultipass.Domain names  domainName does not exist yet  onlyOwner  referrerReward+referralDiscount cannot be larger than fee\",\"params\":{\"domainName\":\"name of LibMultipass.Domain\",\"fee\":\"fee in base currency of network\",\"referralDiscount\":\"referral discount in base currency of network  Emits an {InitializedDomain} event.\",\"referrerReward\":\"referral fee share in base currency of network\",\"registrar\":\"address of registrar\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register((address,bytes32,bytes32,uint96,bytes32,uint256),bytes,(bytes32,address,bytes32,bytes32,bytes32),bytes)\":{\"details\":\"registers new name under LibMultipass.Domain Requirements:  all arguments must be set  domainName must be active resolveRecord for given arguments should return no LibMultipass.Record  Emits an {registered} event.\"},\"renewRecord((bytes32,address,bytes32,bytes32,bytes32),(address,bytes32,bytes32,uint96,bytes32,uint256),bytes)\":{\"params\":{\"query\":\"name query\",\"record\":\"new record\",\"registrarSignature\":\"registrar signature\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"resolveRecord((bytes32,address,bytes32,bytes32,bytes32))\":{\"details\":\"Retrieves the resolved record for a given name query.\",\"params\":{\"query\":\"The name query to resolve.\"},\"returns\":{\"_0\":\"A boolean indicating whether the record was found, and the resolved record.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Checks if the contract supports a given interface.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165.\"},\"returns\":{\"_0\":\"bool True if the contract supports the given interface, false otherwise.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Multipass\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(string,string,address)\":{\"notice\":\"Initializes the contract with a name, version, and owner address. This function can only be called once due to the `initializer` modifier.\"},\"renewRecord((bytes32,address,bytes32,bytes32,bytes32),(address,bytes32,bytes32,uint96,bytes32,uint256),bytes)\":{\"notice\":\"renews record for given query\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Multipass.sol\":\"Multipass\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport {IERC5267} from \\\"@openzeppelin/contracts/interfaces/IERC5267.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\\n    struct EIP712Storage {\\n        /// @custom:oz-renamed-from _HASHED_NAME\\n        bytes32 _hashedName;\\n        /// @custom:oz-renamed-from _HASHED_VERSION\\n        bytes32 _hashedVersion;\\n\\n        string _name;\\n        string _version;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.EIP712\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\\n\\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\\n        assembly {\\n            $.slot := EIP712StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        $._name = name;\\n        $._version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        $._hashedName = 0;\\n        $._hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require($._hashedName == 0 && $._hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = $._hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = $._hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85462422a22578744581e012e9aa0a391958cb360288b0b63f29bf0431d70327\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x6b11eb41a228cca35d4b662b4df69fcd75192851365102690f57b2ac01e83fe6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"src/Multipass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.28;\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"./interfaces/IMultipass.sol\\\";\\nimport \\\"./libraries/LibMultipass.sol\\\";\\n/**\\n * @title Multipass\\n * @dev This contract implements various functions related to the management of domain names and registration records.\\n * @custom:security-contact sirt@peeramid.xyz\\n */\\ncontract Multipass is ERC165Upgradeable, EIP712Upgradeable, IMultipass, ReentrancyGuardUpgradeable, OwnableUpgradeable {\\n    using ECDSA for bytes32;\\n    using LibMultipass for bytes32;\\n\\n    // using LibMultipass for LibMultipass.Record;\\n    using LibMultipass for LibMultipass.Record;\\n    using LibMultipass for bytes;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n    /**\\n     * @notice Initializes the contract with a name, version, and owner address.\\n     * This function can only be called once due to the `initializer` modifier.\\n     * @param name The name to initialize the contract with.\\n     * @param version The version to initialize the contract with.\\n     * @param owner The address of the owner of the contract.\\n     */\\n    function initialize(string memory name, string memory version, address owner) external initializer {\\n        __Ownable_init(owner);\\n        __EIP712_init(name, version);\\n    }\\n\\n    function _isValidSignature(\\n        bytes memory message,\\n        bytes memory signature,\\n        address account\\n    ) internal view returns (bool) {\\n        bytes32 typedHash = _hashTypedDataV4(keccak256(message));\\n        return SignatureChecker.isValidSignatureNow(account, typedHash, signature);\\n    }\\n\\n    function _validateRecord(LibMultipass.Record memory newRecord, bytes memory registrarSignature) private view {\\n        LibMultipass.NameQuery memory query = LibMultipass.queryFromRecord(newRecord);\\n        //Check name query is legit\\n        require(LibMultipass._checkNotEmpty(query.id), invalidQuery(InvalidQueryReasons.EMPTY_ID));\\n        require(LibMultipass._checkNotEmpty(query.domainName), invalidQuery(InvalidQueryReasons.EMPTY_DOMAIN));\\n        require(query.wallet != address(0), invalidQuery(InvalidQueryReasons.EMPTY_ADDRESS));\\n        //Check LibMultipass.Domain is legit\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorage(query.domainName);\\n        require(_domain.properties.isActive, isActive(_domain.properties.name, false));\\n\\n        //check signatures and time\\n        require(newRecord.validUntil > block.timestamp, signatureExpired(newRecord.validUntil));\\n\\n        {\\n            bytes memory registrarMessage = abi.encode(\\n                LibMultipass._TYPEHASH,\\n                newRecord.name,\\n                newRecord.id,\\n                newRecord.domainName,\\n                newRecord.validUntil,\\n                newRecord.nonce\\n            );\\n\\n            require(\\n                _isValidSignature(registrarMessage, registrarSignature, _domain.properties.registrar),\\n                invalidSignature()\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function initializeDomain(\\n        address registrar,\\n        uint256 fee,\\n        uint256 renewalFee,\\n        bytes32 domainName,\\n        uint256 referrerReward,\\n        uint256 referralDiscount\\n    ) public override onlyOwner {\\n        require(registrar != address(0), invalidRegistrar(registrar));\\n        require(LibMultipass._checkNotEmpty(domainName), invalidQuery(InvalidQueryReasons.EMPTY_DOMAIN));\\n        require(LibMultipass.resolveDomainIndex(domainName) == 0, nameExists(domainName));\\n        (bool status, uint256 result) = Math.tryAdd(referrerReward, referralDiscount);\\n        require(status, mathOverflow(referrerReward, referralDiscount));\\n        require(result <= fee, referralRewardsTooHigh(referrerReward, referralDiscount, fee));\\n\\n        LibMultipass._initializeDomain(registrar, fee, renewalFee, domainName, referrerReward, referralDiscount);\\n        emit InitializedDomain(registrar, fee, domainName, renewalFee, referrerReward, referralDiscount);\\n    }\\n\\n    function _enforseDomainNameIsValid(bytes32 domainName) private view {\\n        require(domainName._checkNotEmpty(), invalidDomain(domainName));\\n        require(domainName.resolveDomainIndex() != 0, invalidDomain(domainName));\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function activateDomain(bytes32 domainName) external override onlyOwner {\\n        _enforseDomainNameIsValid(domainName);\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorage(domainName);\\n        _domain.properties.isActive = true;\\n        emit DomainActivated(domainName);\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function deactivateDomain(bytes32 domainName) public override onlyOwner {\\n        _enforseDomainNameIsValid(domainName);\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorage(domainName);\\n        _domain.properties.isActive = false;\\n        emit DomainDeactivated(domainName);\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function changeFee(bytes32 domainName, uint256 fee) public override onlyOwner {\\n        _enforseDomainNameIsValid(domainName);\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorage(domainName);\\n        uint256 _referrerReward = _domain.properties.referrerReward;\\n        uint256 _referralDiscount = _domain.properties.referralDiscount;\\n        require(\\n            _referralDiscount + _referrerReward <= fee,\\n            referralRewardsTooHigh(_referrerReward, _referralDiscount, fee)\\n        );\\n        _domain.properties.fee = fee;\\n        emit DomainFeeChanged(domainName, fee);\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function changeRegistrar(bytes32 domainName, address newRegistrar) external override onlyOwner {\\n        _enforseDomainNameIsValid(domainName);\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorage(domainName);\\n        require(newRegistrar != address(0), invalidRegistrar(newRegistrar));\\n        _domain.properties.registrar = newRegistrar;\\n        emit RegistrarChanged(domainName, newRegistrar);\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function deleteName(\\n        LibMultipass.NameQuery memory query // bytes32 domainName, // address wallet, // bytes32 username, // bytes32 id\\n    ) external override onlyOwner {\\n        _enforseDomainNameIsValid(query.domainName);\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorage(query.domainName);\\n        query.targetDomain = \\\"\\\";\\n        (bool status, LibMultipass.Record memory r) = resolveRecord(query);\\n        require(status, userNotFound(query));\\n        _domain.addressToId[r.wallet] = bytes32(0);\\n        _domain.idToAddress[r.id] = address(0);\\n        _domain.idToName[r.id] = bytes32(0);\\n        _domain.nameToId[r.name] = bytes32(0);\\n        _domain.validUntil[r.wallet] = 0;\\n        _domain.nonce[r.id] += 1;\\n        _domain.properties.registerSize--;\\n\\n        emit nameDeleted(_domain.properties.name, r.wallet, r.id, r.name);\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function changeReferralProgram(\\n        uint256 referrerReward,\\n        uint256 referralDiscount,\\n        bytes32 domainName\\n    ) external override onlyOwner {\\n        _enforseDomainNameIsValid(domainName);\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorage(domainName);\\n        (bool status, uint256 result) = Math.tryAdd(referrerReward, referralDiscount);\\n        require(status, mathOverflow(referrerReward, referralDiscount));\\n        require(\\n            result <= _domain.properties.fee,\\n            referralRewardsTooHigh(referrerReward, referralDiscount, _domain.properties.fee)\\n        );\\n        _domain.properties.referrerReward = referrerReward;\\n        _domain.properties.referralDiscount = referralDiscount;\\n        emit ReferralProgramChanged(domainName, referrerReward, referralDiscount);\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function resolveRecord(\\n        LibMultipass.NameQuery memory query\\n    ) public view override returns (bool, LibMultipass.Record memory) {\\n        return LibMultipass.resolveRecord(query);\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function register(\\n        LibMultipass.Record memory newRecord,\\n        bytes memory registrarSignature,\\n        LibMultipass.NameQuery memory referrer,\\n        bytes memory referralCode\\n    ) external payable override nonReentrant {\\n        _enforseDomainNameIsValid(newRecord.domainName);\\n        //Check query does not resolves (name already exists)\\n\\n        {\\n            LibMultipass.NameQuery memory query = LibMultipass.queryFromRecord(newRecord);\\n            {\\n                (bool success, LibMultipass.Record memory r) = LibMultipass.resolveRecord(query);\\n                require(!success, recordExists(r));\\n            }\\n            {\\n                query.wallet = address(0);\\n                (bool success, LibMultipass.Record memory r) = LibMultipass.resolveRecord(query);\\n                require(!success, recordExists(r));\\n            }\\n            {\\n                query.id = bytes32(0);\\n                (bool success, LibMultipass.Record memory r) = LibMultipass.resolveRecord(query);\\n                require(!success, recordExists(r));\\n            }\\n        }\\n        _validateRecord(newRecord, registrarSignature);\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorage(newRecord.domainName);\\n        (bool hasValidReferrer, LibMultipass.Record memory referrerRecord) = LibMultipass.resolveRecord(referrer);\\n\\n        uint256 referrersShare = hasValidReferrer ? _domain.properties.referrerReward : 0;\\n        uint256 valueToPay = _domain.properties.fee - (hasValidReferrer ? _domain.properties.referralDiscount : 0);\\n        require(msg.value >= valueToPay, paymentTooLow(valueToPay, msg.value));\\n        uint256 ownerShare = msg.value - referrersShare;\\n        {\\n            (bool success, ) = payable(owner()).call{value: ownerShare}(\\\"\\\");\\n            require(success, paymendFailed());\\n        }\\n\\n        if (hasValidReferrer) {\\n            require(referrerRecord.wallet != newRecord.wallet, referredSelf());\\n            {\\n                bytes memory refferalMessage = abi.encode(LibMultipass._TYPEHASH_REFERRAL, referrerRecord.wallet);\\n                require(_isValidSignature(refferalMessage, referralCode, referrerRecord.wallet), invalidSignature());\\n                (bool success, ) = payable(referrerRecord.wallet).call{value: referrersShare}(\\\"\\\");\\n                require(success, paymendFailed());\\n            }\\n            emit Referred(referrerRecord, newRecord, newRecord.domainName);\\n        }\\n\\n        LibMultipass._registerNew(newRecord, _domain);\\n        emit Registered(_domain.properties.name, newRecord);\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function renewRecord(\\n        LibMultipass.NameQuery memory query,\\n        LibMultipass.Record memory record,\\n        bytes memory registrarSignature\\n    ) external payable override nonReentrant {\\n        _enforseDomainNameIsValid(record.domainName);\\n        (bool userExists, LibMultipass.Record memory userRecord) = LibMultipass.resolveRecord(query);\\n        require(userRecord.nonce < record.nonce, invalidNonceIncrement(userRecord.nonce, record.nonce));\\n        require(userRecord.domainName == record.domainName, invalidDomain(userRecord.domainName));\\n        _validateRecord(record, registrarSignature);\\n        require(userExists, userNotFound(query));\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorage(record.domainName);\\n        require(_domain.properties.isActive, domainNotActive(record.domainName));\\n        require(record.validUntil >= block.timestamp, signatureExpired(record.validUntil));\\n        emit Renewed(record.wallet, record.domainName, record.id, record);\\n        if (_domain.properties.renewalFee > 0) {\\n            require(\\n                msg.value >= _domain.properties.renewalFee,\\n                paymentTooLow(_domain.properties.renewalFee, msg.value)\\n            );\\n            (bool success, ) = payable(owner()).call{value: _domain.properties.renewalFee}(\\\"\\\");\\n            require(success, paymendFailed());\\n        }\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function getDomainState(bytes32 domainName) external view override returns (LibMultipass.Domain memory) {\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorage(domainName);\\n        return _domain.properties;\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function getDomainStateById(uint256 id) external view returns (LibMultipass.Domain memory) {\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorageById(id);\\n        return _domain.properties;\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function getContractState() external view override returns (uint256) {\\n        return LibMultipass._getContractState();\\n    }\\n\\n    /**\\n     * @dev Checks if the contract supports a given interface.\\n     * @param interfaceId The interface identifier, as specified in ERC-165.\\n     * @return bool True if the contract supports the given interface, false otherwise.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IMultipass).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IMultipass\\n    function changeRenewalFee(uint256 fee, bytes32 domainName) external onlyOwner {\\n        _enforseDomainNameIsValid(domainName);\\n        LibMultipass.DomainStorage storage _domain = LibMultipass._getDomainStorage(domainName);\\n        _domain.properties.renewalFee = fee;\\n        emit RenewalFeeChanged(domainName, fee);\\n    }\\n}\\n\",\"keccak256\":\"0xc778ad2158551b95977259b5014532d4d7cf057eefa8add6cc84890b6c9b2f64\",\"license\":\"MIT\"},\"src/interfaces/IMultipass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.28;\\n\\nimport {LibMultipass} from \\\"../libraries/LibMultipass.sol\\\";\\n\\n/**\\n * @title IMultipass\\n * @notice Interface for the Multipass contract. Multipass contract acts as cross-domain registry, allowing owner to specify registrars and domains that can be used to register names.\\n * It also allows for referral program, where referrers can earn rewards for referring new registrations.\\n * @custom:security-contact sirt@peeramid.xyz\\n */\\ninterface IMultipass {\\n    enum InvalidQueryReasons {\\n        EMPTY_ID,\\n        EMPTY_DOMAIN,\\n        EMPTY_ADDRESS\\n    }\\n\\n    error invalidQuery(InvalidQueryReasons reason);\\n    error nameExists(bytes32 name);\\n    error recordExists(LibMultipass.Record newRecord);\\n    error isActive(bytes32 name, bool isActive);\\n    error signatureExpired(uint256 signatureDeadline);\\n    error invalidSignature();\\n    error mathOverflow(uint256 a, uint256 b);\\n    error invalidDomain(bytes32 domainName);\\n    error referralRewardsTooHigh(uint256 referrerReward, uint256 referralDiscount, uint256 fee);\\n    error invalidRegistrar(address registrar);\\n    error paymentTooLow(uint256 fee, uint256 value);\\n    error paymendFailed();\\n    error referredSelf();\\n    error domainNotActive(bytes32 domainName);\\n    error userNotFound(LibMultipass.NameQuery query);\\n    error invalidnameChange(bytes32 domainName, bytes32 newName);\\n    error invalidNonce(uint256 nonce);\\n    error invalidNonceIncrement(uint256 old, uint256 newer);\\n\\n    /**\\n     * @dev Retrieves the resolved record for a given name query.\\n     * @param query The name query to resolve.\\n     * @return A boolean indicating whether the record was found, and the resolved record.\\n     */\\n    function resolveRecord(\\n        LibMultipass.NameQuery memory query\\n    ) external view returns (bool, LibMultipass.Record memory);\\n\\n    /**\\n     * @dev Initializes new LibMultipass.Domain and configures it's parameters\\n     *\\n     * Requirements:\\n     *  registrar is not zero\\n     *  domainName is not empty\\n     *  domainIndex is either zero(auto assign) or can be one of preoccupied LibMultipass.Domain names\\n     *  domainName does not exist yet\\n     *  onlyOwner\\n     *  referrerReward+referralDiscount cannot be larger than fee\\n     *  @param registrar address of registrar\\n     *  @param fee fee in base currency of network\\n     *  @param domainName name of LibMultipass.Domain\\n     *  @param referrerReward referral fee share in base currency of network\\n     *  @param referralDiscount referral discount in base currency of network\\n     *\\n     *  Emits an {InitializedDomain} event.\\n     */\\n    function initializeDomain(\\n        address registrar,\\n        uint256 fee,\\n        uint256 renewalFee,\\n        bytes32 domainName,\\n        uint256 referrerReward,\\n        uint256 referralDiscount\\n    ) external;\\n\\n    /**\\n     * @dev Activates LibMultipass.Domain name\\n     *\\n     * Requirements:\\n     *  msg.sender is Owner\\n     *\\n     *\\n     *  Emits an {DomainActivated} event.\\n     */\\n    function activateDomain(bytes32 domainName) external;\\n\\n    /**\\n     * @dev Deactivates LibMultipass.Domain name\\n     *\\n     * Deactivated LibMultipass.Domain cannot mutate names and will return zeros\\n     *\\n     * Requirements:\\n     *  msg.sender is Owner OR registrar\\n     *\\n     *\\n     *  Emits an {DomainDeactivated} event.\\n     */\\n    function deactivateDomain(bytes32 domainName) external;\\n\\n    /**\\n     * @dev Changes registrar address\\n     *\\n     * Requirements:\\n     *  msg.sender is Owner\\n     *\\n     *  Emits an {DomainFeeChanged} event.\\n     */\\n    function changeFee(bytes32 domainName, uint256 fee) external;\\n\\n    /**\\n     * @dev Changes registrar address\\n     *\\n     * Requirements:\\n     *  msg.sender is Owner\\n     *\\n     *  Emits an {RegistrarChangeRequested} event.\\n     */\\n    function changeRegistrar(bytes32 domainName, address newRegistrar) external;\\n\\n    /**\\n     * @dev deletes name\\n     *\\n     * Requirements:\\n     *  msg.sender is Owner\\n     *\\n     *  Emits an {DomainTTLChangeRequested} event.\\n     */\\n    function deleteName(LibMultipass.NameQuery memory query) external;\\n\\n    /**\\n     * @dev executes all pending changes to LibMultipass.Domain that fulfill TTL\\n     *\\n     * Requirements:\\n     *  domainName must be set\\n     *  referrerFeeShare+referralDiscount cannot be larger than 2^32\\n     *\\n     *\\n     *  Emits an {ReferralProgramChangeRequested} event.\\n     */\\n    function changeReferralProgram(uint256 referrerFeeShare, uint256 referralDiscount, bytes32 domainName) external;\\n\\n    /**\\n     * @dev changes renewal fee for domain\\n     *\\n     * Requirements:\\n     *  domainName must be set\\n     *  fee must be set\\n     *\\n     *\\n     *  Emits an {RenewalFeeChangeRequested} event.\\n     */\\n    function changeRenewalFee(uint256 fee, bytes32 domainName) external;\\n\\n    /**\\n     * @dev registers new name under LibMultipass.Domain\\n     *\\n     * Requirements:\\n     *  all arguments must be set\\n     *  domainName must be active\\n     * resolveRecord for given arguments should return no LibMultipass.Record\\n     *\\n     *\\n     *  Emits an {registered} event.\\n     */\\n    function register(\\n        LibMultipass.Record memory newRecord,\\n        bytes memory registrarSignature,\\n        LibMultipass.NameQuery memory referrer,\\n        bytes memory referralCode\\n    ) external payable;\\n\\n    /**\\n     * @dev returns LibMultipass.Domain state variables\\n     * @param domainName name of the LibMultipass.Domain\\n     * @return (name,\\n      fee,\\n       referrerReward,\\n       referralDiscount,\\n       isActive,\\n       registrar,\\n       ttl,\\n        registerSize)\\n     */\\n    function getDomainState(bytes32 domainName) external view returns (LibMultipass.Domain memory);\\n\\n    /**\\n     * @dev returns contract state variables\\n\\n     * @return (s_numDomains)\\n     */\\n    function getContractState() external view returns (uint256);\\n    /**\\n     * @dev returns price for registering name\\n     *\\n     */\\n    event fundsWithdawn(uint256 indexed amount, address indexed account);\\n\\n    /**\\n     * @dev Initializes a new domain with the specified parameters.\\n     * @param registrar The address of the registrar for the domain.\\n     * @param fee The fee required for registration in the domain.\\n     * @param domainName The name of the domain.\\n     * @param referrerReward The reward for referring new registrations to the domain.\\n     * @param referralDiscount The discount for referrals in the domain.\\n     */\\n    event InitializedDomain(\\n        address indexed registrar,\\n        uint256 indexed fee,\\n        bytes32 indexed domainName,\\n        uint256 renewalFee,\\n        uint256 referrerReward,\\n        uint256 referralDiscount\\n    );\\n\\n    /**\\n     * @dev Emitted when a domain is activated.\\n     * @param domainName The name of the activated domain.\\n     */\\n    event DomainActivated(bytes32 indexed domainName);\\n\\n    /**\\n     * @dev Emitted when a domain is deactivated.\\n     * @param domainName The name of the deactivated domain.\\n     */\\n    event DomainDeactivated(bytes32 indexed domainName);\\n\\n    /**\\n     * @dev Emitted when the fee for a domain is changed.\\n     * @param domainName The name of the domain.\\n     * @param newFee The new fee for the domain.\\n     */\\n    event DomainFeeChanged(bytes32 indexed domainName, uint256 indexed newFee);\\n\\n    /**\\n     * @dev Emitted when a registrar change is requested for a domain.\\n     * @param domainName The name of the domain.\\n     * @param registrar The address of the new registrar.\\n     */\\n    event RegistrarChanged(bytes32 indexed domainName, address indexed registrar);\\n\\n    /**\\n     * @dev Emitted when a name is deleted.\\n     * @param domainName The domain name.\\n     * @param wallet The address of the wallet.\\n     * @param id The ID of the name.\\n     * @param name The name.\\n     */\\n    event nameDeleted(bytes32 indexed domainName, address indexed wallet, bytes32 indexed id, bytes32 name);\\n\\n    /**\\n     * @dev Emitted when the referral program for a domain is changed.\\n     * @param domainName The domain name.\\n     * @param reward The referral reward amount.\\n     * @param discount The referral discount amount.\\n     */\\n    event ReferralProgramChanged(bytes32 indexed domainName, uint256 reward, uint256 discount);\\n\\n    /**\\n     * @dev Emitted when a domain is registered.\\n     * @param domainName The domain name.\\n     * @param NewRecord The new record.\\n     */\\n    event Registered(bytes32 indexed domainName, LibMultipass.Record NewRecord);\\n\\n    /**\\n     * @dev Emitted when a user is referred.\\n     * @param refferrer The record of the referrer.\\n     * @param newRecord The new record.\\n     * @param domainName The domain name.\\n     */\\n    event Referred(LibMultipass.Record refferrer, LibMultipass.Record newRecord, bytes32 indexed domainName);\\n\\n    /**\\n     * @dev Emitted when a user record is renewed.\\n     * @param wallet The address of the wallet.\\n     * @param domainName The domain name.\\n     * @param id The ID of the record.\\n     * @param newRecord The new record.\\n     */\\n    event Renewed(\\n        address indexed wallet,\\n        bytes32 indexed domainName,\\n        bytes32 indexed id,\\n        LibMultipass.Record newRecord\\n    );\\n\\n    /**\\n     * @dev Emitted when a domain renewal fee is changed.\\n     * @param domainName The domain name.\\n     * @param newFee The new renewal fee.\\n     */\\n    event RenewalFeeChanged(bytes32 indexed domainName, uint256 indexed newFee);\\n\\n    /**\\n     * @dev Retrieves the domain state by its ID.\\n     * @param id The ID of the domain.\\n     * @return The domain state as a `LibMultipass.Domain` struct.\\n     */\\n    function getDomainStateById(uint256 id) external view returns (LibMultipass.Domain memory);\\n\\n    /**\\n     * @notice renews record for given query\\n     * @param query name query\\n     * @param record new record\\n     * @param registrarSignature registrar signature\\n     */\\n    function renewRecord(\\n        LibMultipass.NameQuery memory query,\\n        LibMultipass.Record memory record,\\n        bytes memory registrarSignature\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x790366d3e7a3904d0d2cee4a96b0044ee2288aa359aaf80c72d0b45dbb7e617f\",\"license\":\"MIT\"},\"src/libraries/LibMultipass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.28;\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title LibMultipass\\n * @notice Library for handling multipass functionality.\\n *\\n * This library provides a set of functions to manage and utilize multipass features.\\n * It is designed to be used as a part of the multipass system within the project.\\n * @custom:security-contact sirt@peeramid.xyz\\n */\\nlibrary LibMultipass {\\n    /**\\n     * @dev resolves user from any given argument\\n     * Requirements:\\n     *  domainName must be given and must be initialized\\n     *  id OR username OR address must be given\\n     * This method first tries to resolve by address, then by user id and finally by username\\n     * @param domainName domain name\\n     * @param wallet adress of user\\n     * @param id user id\\n     * @param username username\\n     * @param targetDomain if this is set to valid domain name, then after sucessfull resolving account at domainName,\\n     *                       this method will rerun with resolving user properties in targetDomain\\n     */\\n    struct NameQuery {\\n        bytes32 domainName;\\n        address wallet;\\n        bytes32 name;\\n        bytes32 id;\\n        bytes32 targetDomain;\\n    }\\n\\n    /**\\n     * @dev The domain name of the registrar.\\n     * @param registrar is the address private key of which is owned by signing server (e.g. Discord bot server)\\n     * @param name is unique string that is used to find this domain within domains.\\n\\n     * @param fee amount of payment requried to register name in the domain\\n     * @param ttl time to live for changes in the domain properties\\n     * @param isActive when is false domain name will not respond to any changes and will not return any address\\n    **/\\n    struct Domain {\\n        bytes32 name; //32bytes\\n        uint256 fee; //32bytes\\n        uint256 referrerReward; //32bytes\\n        uint256 referralDiscount; //32bytes\\n        bool isActive; //1byte\\n        address registrar; //20 bytes\\n        uint24 ttl; //3 bytes (not being used for now)\\n        uint256 registerSize; //32bytes\\n        uint256 renewalFee; //32bytes\\n    }\\n\\n    /**\\n     * @dev The record in the registry.\\n     * @param wallet is the address of the user\\n     * @param name is the name of the user\\n     * @param id is the unique identificator of the user\\n     * @param nonce is the number of changes in the user record\\n     * @param domainName is the domain name of the registrar\\n     **/\\n    struct Record {\\n        address wallet;\\n        bytes32 name;\\n        bytes32 id;\\n        uint96 nonce;\\n        bytes32 domainName;\\n        uint256 validUntil;\\n    }\\n\\n    bytes32 private constant MULTIPASS_STORAGE_POSITION = bytes32(uint256(keccak256(\\\"multipass.storage.struct\\\")) - 1);\\n\\n    /**\\n     * @dev The domain name of the registrar.\\n     * @param properties - domain configuration\\n     * @param idToAddress is mapping from unique identificator to an address\\n     * @param registerSize is number of registered users for this domain\\n     * @param nonce is incremented each time Record changes in addressToId map\\n     * @param nameToId is mapping from names to unique identificator. While each name required to be unique,\\n                        names might change on the domain, so we keep records to user identificators as immutable property of user\\n     * @param addressToId is mapping from an address to unique identificator\\n     * @param idToName is mapping from identificator to a name\\n    **/\\n    struct DomainStorage {\\n        Domain properties; //128 bytes\\n        mapping(bytes32 => address) idToAddress; //N*20bytes\\n        mapping(bytes32 => uint96) nonce; //N*12bytes\\n        mapping(address => bytes32) addressToId; //N*32 bytes\\n        mapping(bytes32 => bytes32) nameToId; //N*32 bytes\\n        mapping(bytes32 => bytes32) idToName; //N*32 bytes\\n        mapping(address => uint256) validUntil; //N*32 bytes\\n    }\\n\\n    /**\\n     * @dev The storage structure for the Multipass contract.\\n     * @param domains is mapping from domain index to domain properties\\n     * @param domainNameToIndex is mapping from domain name to domain index\\n     */\\n    struct MultipassStorageStruct {\\n        mapping(uint256 => DomainStorage) domains;\\n        mapping(bytes32 => uint256) domainNameToIndex; //helper to get domain index by name\\n        uint256 numDomains;\\n    }\\n\\n    /**\\n     * @dev Returns the storage struct for the Multipass contract.\\n     */\\n    function MultipassStorage() private pure returns (MultipassStorageStruct storage es) {\\n        bytes32 position = MULTIPASS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n\\n    bytes32 internal constant _TYPEHASH =\\n        keccak256(\\\"registerName(bytes32 name,bytes32 id,bytes32 domainName,uint256 validUntil,uint96 nonce)\\\");\\n    bytes32 internal constant _TYPEHASH_REFERRAL = keccak256(\\\"proofOfReferrer(address referrerAddress)\\\");\\n\\n    function _checkNotEmpty(bytes32 value) internal pure returns (bool) {\\n        if (value == \\\"\\\") {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Resolves the index of a domain name in the Multipass storage.\\n     * @param domainName The domain name to resolve the index for.\\n     * @return The index of the domain name in the storage.\\n     */\\n    function resolveDomainIndex(bytes32 domainName) internal view returns (uint256) {\\n        MultipassStorageStruct storage s = MultipassStorage();\\n        return s.domainNameToIndex[domainName];\\n    }\\n\\n    function _getDomainStorage(bytes32 domainName) internal view returns (DomainStorage storage) {\\n        MultipassStorageStruct storage s = MultipassStorage();\\n\\n        return s.domains[resolveDomainIndex(domainName)];\\n    }\\n\\n    function _initializeDomain(\\n        address registrar,\\n        uint256 fee,\\n        uint256 renewalFee,\\n        bytes32 domainName,\\n        uint256 referrerReward,\\n        uint256 referralDiscount\\n    ) internal {\\n        LibMultipass.MultipassStorageStruct storage ms = MultipassStorage();\\n\\n        uint256 domainIndex = ms.numDomains + 1;\\n        LibMultipass.DomainStorage storage _domain = ms.domains[domainIndex];\\n        _domain.properties.registrar = registrar;\\n        _domain.properties.fee = fee;\\n        _domain.properties.name = domainName;\\n        _domain.properties.referrerReward = referrerReward;\\n        _domain.properties.referralDiscount = referralDiscount;\\n        _domain.properties.renewalFee = renewalFee;\\n        ms.numDomains++;\\n        ms.domainNameToIndex[domainName] = domainIndex;\\n    }\\n\\n    function _resolveRecord(NameQuery memory query) private view returns (bool, Record memory) {\\n        if ((query.wallet == address(0)) && (query.id == bytes32(0)) && (query.name == bytes32(0))) {\\n            Record memory rv;\\n            return (false, rv);\\n        }\\n\\n        MultipassStorageStruct storage s = MultipassStorage();\\n        DomainStorage storage _domain = s.domains[s.domainNameToIndex[query.domainName]];\\n        DomainStorage storage _targetDomain = s.domains[\\n            s.domainNameToIndex[query.targetDomain == bytes32(0) ? query.domainName : query.targetDomain]\\n        ];\\n        address _wallet;\\n        {\\n            // resolve wallet\\n            if (query.wallet != address(0)) {\\n                _wallet = query.wallet;\\n            } else if (query.id != bytes32(0)) {\\n                _wallet = _domain.idToAddress[query.id];\\n            } else if (query.name != bytes32(0)) {\\n                bytes32 _id = _domain.nameToId[query.name];\\n                _wallet = _domain.idToAddress[_id];\\n            }\\n        }\\n\\n        //from wallet find and return record\\n        return _resolveFromAddress(_wallet, _targetDomain);\\n    }\\n\\n    /**\\n     * @dev Resolves the record of a user.\\n     * @param query The query to resolve the record for.\\n     * @return The record of the user.\\n     * @dev resolves Record of name query in to status and identity\\n     */\\n    function resolveRecord(NameQuery memory query) internal view returns (bool, Record memory) {\\n        return _resolveRecord(query);\\n    }\\n\\n    /** @dev this function bears no security checks, it will ignore nonce in arg and will increment\\n     *   nonce value stored in domain instread\\n     */\\n    function _setRecord(DomainStorage storage domain, Record memory record) internal {\\n        domain.addressToId[record.wallet] = record.id;\\n        domain.idToAddress[record.id] = record.wallet;\\n        domain.idToName[record.id] = record.name;\\n        domain.nameToId[record.name] = record.id;\\n        domain.nonce[record.id] += 1;\\n        domain.validUntil[record.wallet] = record.validUntil;\\n    }\\n\\n    function _resolveFromAddress(\\n        address _address,\\n        DomainStorage storage _domain\\n    ) private view returns (bool, Record memory) {\\n        Record memory resolved;\\n\\n        resolved.id = _domain.addressToId[_address];\\n        resolved.name = _domain.idToName[resolved.id];\\n        resolved.nonce = _domain.nonce[resolved.id];\\n        resolved.wallet = _address;\\n        resolved.domainName = _domain.properties.name;\\n        resolved.validUntil = _domain.validUntil[_address];\\n\\n        if (resolved.id == bytes32(0)) {\\n            return (false, resolved);\\n        }\\n        return (true, resolved);\\n    }\\n    /**\\n     * @dev Resolves the record of a user.\\n     * @param _record The record to resolve the query for.\\n     * @return query result.\\n     */\\n    function queryFromRecord(Record memory _record) internal pure returns (NameQuery memory) {\\n        NameQuery memory _query;\\n        _query.id = _record.id;\\n        _query.domainName = _record.domainName;\\n        _query.name = _record.name;\\n        _query.wallet = _record.wallet;\\n        return _query;\\n    }\\n\\n    function _registerNew(Record memory newRecord, DomainStorage storage domain) internal {\\n        _setRecord(domain, newRecord);\\n        domain.properties.registerSize += 1;\\n    }\\n\\n    function _getContractState() internal view returns (uint256) {\\n        LibMultipass.MultipassStorageStruct storage ms = MultipassStorage();\\n        return ms.numDomains;\\n    }\\n\\n    function _getDomainStorageById(uint256 id) internal view returns (DomainStorage storage) {\\n        MultipassStorageStruct storage s = MultipassStorage();\\n\\n        return s.domains[id];\\n    }\\n\\n    using LibMultipass for NameQuery;\\n}\\n\",\"keccak256\":\"0xdd51454518a914644e35581d83cf93c0aa99810d2ce36c24316e14c577051165\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506016601a565b60ca565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560695760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6132fa806100d96000396000f3fe60806040526004361061015f5760003560e01c80637916692c116100c05780638da5cb5b11610074578063d53175b711610059578063d53175b7146103c3578063f2fde38b146103e3578063f8a7e7911461040357600080fd5b80638da5cb5b1461035c578063ca55d6e4146103a357600080fd5b806384b0196e116100a557806384b0196e146102e6578063898c2bd71461030e5780638d5f464d1461033c57600080fd5b80637916692c146102965780637f4e4849146102c357600080fd5b80634f2f2ae111610117578063715018a6116100fc578063715018a614610241578063743790ed1461025657806375b83e5e1461027657600080fd5b80634f2f2ae1146102015780636608ef421461022157600080fd5b8063077f224a11610148578063077f224a146101ae5780630b07a3d1146101ce57806348158649146101ee57600080fd5b806301ffc9a714610164578063061e960814610199575b600080fd5b34801561017057600080fd5b5061018461017f3660046128d3565b610423565b60405190151581526020015b60405180910390f35b6101ac6101a7366004612af1565b6104bc565b005b3480156101ba57600080fd5b506101ac6101c9366004612b53565b610817565b3480156101da57600080fd5b506101ac6101e9366004612bcc565b610977565b6101ac6101fc366004612be5565b6109d4565b34801561020d57600080fd5b506101ac61021c366004612c73565b610e74565b34801561022d57600080fd5b506101ac61023c366004612c9f565b610f76565b34801561024d57600080fd5b506101ac611134565b34801561026257600080fd5b506101ac610271366004612ce9565b611148565b34801561028257600080fd5b506101ac610291366004612bcc565b611223565b3480156102a257600080fd5b506102b66102b1366004612bcc565b61127d565b6040516101909190612d15565b3480156102cf57600080fd5b506102d8611364565b604051908152602001610190565b3480156102f257600080fd5b506102fb611373565b6040516101909796959493929190612de2565b34801561031a57600080fd5b5061032e610329366004612e96565b61146f565b604051610190929190612eb2565b34801561034857600080fd5b506102b6610357366004612bcc565b6114b2565b34801561036857600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b039091168152602001610190565b3480156103af57600080fd5b506101ac6103be366004612f14565b611504565b3480156103cf57600080fd5b506101ac6103de366004612f14565b6115ad565b3480156103ef57600080fd5b506101ac6103fe366004612f36565b611605565b34801561040f57600080fd5b506101ac61041e366004612e96565b61165c565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f88ecd0bd0000000000000000000000000000000000000000000000000000000014806104b657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6104c461185f565b6104d182608001516118e0565b6000806104dd8561193b565b606080870151908201519294509092506bffffffffffffffffffffffff80821690831610610554576040517fed2c5af90000000000000000000000000000000000000000000000000000000081526bffffffffffffffffffffffff9283166004820152911660248201526044015b60405180910390fd5b50506080808501519082015190811461058357604051632d2a698160e21b815260040161054b91815260200190565b5061058e8484611975565b84826105fb57604080517f76fcd6d60000000000000000000000000000000000000000000000000000000081528251600482015260208301516001600160a01b0316602482015290820151604482015260608201516064820152608090910151608482015260a40161054b565b50600061060b8560800151611c09565b6004810154608087015191925060ff16610654576040517f35b79ca400000000000000000000000000000000000000000000000000000000815260040161054b91815260200190565b5060a085015142811015610697576040517f697d517d00000000000000000000000000000000000000000000000000000000815260040161054b91815260200190565b508460400151856080015186600001516001600160a01b03167f6753198d54b2e4642b1a6e2511b6c7431bd7230eb4733b64fcd12dbf3dc30a07886040516106df9190612f51565b60405180910390a46006810154156107e6576006810154348181101561073a576040517f58c72c450000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161054b565b5050600061076f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b60068301546040516001600160a01b039290921691600081818185875af1925050503d80600081146107bd576040519150601f19603f3d011682016040523d82523d6000602084013e6107c2565b606091505b50509050806107e4576040516328e7763f60e01b815260040160405180910390fd5b505b50505061081260017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156108625750825b905060008267ffffffffffffffff16600114801561087f5750303b155b90508115801561088d575080155b156108c4576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561090f57845468ff00000000000000001916680100000000000000001785555b61091886611c38565b6109228888611c49565b831561096d57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b61097f611c5b565b610988816118e0565b600061099382611c09565b60048101805460ff1916600117905560405190915082907f12ba12d5905656d674e5e6eb43518e8037aa5c2d412275fed1d6c87b3579f8f490600090a25050565b6109dc61185f565b6109e984608001516118e0565b6040805160a08082018352600080835260208084018290528385018290526060808501839052608094850183905285519384018652828452838201838152848701848152918501848152858701859052968b015190965293890151835288015190925286516001600160a01b031690925280610a648361193b565b9150915081158190610a8a576040516334bc6c5160e11b815260040161054b9190612f51565b5050600060208301819052905080610aa18361193b565b9150915081158190610ac7576040516334bc6c5160e11b815260040161054b9190612f51565b5050600060608301819052905080610ade8361193b565b9150915081158190610b04576040516334bc6c5160e11b815260040161054b9190612f51565b50505050610b128484611975565b6000610b218560800151611c09565b9050600080610b2f8561193b565b91509150600082610b41576000610b47565b60028401545b9050600083610b57576000610b5d565b60038501545b6001860154610b6c9190612fc1565b9050803481811015610bb3576040517f58c72c450000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161054b565b5060009050610bc28334612fc1565b90506000610bf77f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610c41576040519150601f19603f3d011682016040523d82523d6000602084013e610c46565b606091505b5050905080610c68576040516328e7763f60e01b815260040160405180910390fd5b508415610dfb57895184516001600160a01b03918216911603610cb7576040517f158f8ec200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8351604080517f216da2d1b8943b28c3c65d1a24b58fdf6dfd051d8f0667966ebf5d8ae37ceb7660208201526001600160a01b0390921682820152805180830382018152606090920190528451610d119082908a90611ccf565b610d47576040517fd1cc120200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84516040516000916001600160a01b03169086908381818185875af1925050503d8060008114610d93576040519150601f19603f3d011682016040523d82523d6000602084013e610d98565b606091505b5050905080610dba576040516328e7763f60e01b815260040160405180910390fd5b505089608001517fe15b8c6c90311f7f1ef7acd0c591854454b7ce3e8f9b781b840bddb4b2df2136858c604051610df2929190612fd4565b60405180910390a25b610e058a87611cfa565b85546040517fbe3ff53fa4b2c981ecee65725c32db419428aa34c21d80a35e2f62295b9ffaf190610e37908d90612f51565b60405180910390a2505050505050610e6e60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50505050565b610e7c611c5b565b610e85816118e0565b6000610e9082611c09565b9050600080610e9f8686611d25565b9092509050858583610ee6576040517f7b74c8910000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161054b565b505060018301548690869080841115610f235760405163555a499960e11b815260048101939093526024830191909152604482015260640161054b565b5050506002830186905560038301859055604080518781526020810187905285917e640530575cb3beb0ff2a19a68ca7e85232d0defd808bb6945c8250a0e6c828910160405180910390a2505050505050565b610f7e611c5b565b856001600160a01b038116610fcb576040517fc4124c060000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260240161054b565b50610fd583611d4e565b600190610ff6576040516302a4083360e41b815260040161054b919061309e565b5061100083611d6d565b83901561103c576040517f143dc3f800000000000000000000000000000000000000000000000000000000815260040161054b91815260200190565b5060008061104a8484611d25565b9092509050838383611091576040517f7b74c8910000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161054b565b508490508388808411156110c95760405163555a499960e11b815260048101939093526024830191909152604482015260640161054b565b5050506110da888888888888611d8d565b6040805187815260208101869052908101849052859088906001600160a01b038b16907fffc21a23b715653050f8085f1c0b2ad389452156c248d4483aa814cb417541309060600160405180910390a45050505050505050565b61113c611c5b565b6111466000611e49565b565b611150611c5b565b611159826118e0565b600061116483611c09565b9050816001600160a01b0381166111b3576040517fc4124c060000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260240161054b565b506004810180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b0385169081029190911790915560405184907fd41d966d7fbc3eb366c5a0e0abea2aa1b2ceba4b78ee1e0314bf47dfb19011f290600090a3505050565b61122b611c5b565b611234816118e0565b600061123f82611c09565b60048101805460ff1916905560405190915082907f3e326791c535b99fa4690e49e159504f5930c05068dce433b45279165d51f73890600090a25050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052906112cf83611c09565b6040805161012081018252825481526001830154602082015260028301549181019190915260038201546060820152600482015460ff8116151560808301526101008082046001600160a01b031660a0840152750100000000000000000000000000000000000000000090910462ffffff1660c0830152600583015460e0830152600690920154918101919091529392505050565b600061136e611ec7565b905090565b600060608082808083817fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10080549091501580156113b257506001810154155b611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4549503731323a20556e696e697469616c697a65640000000000000000000000604482015260640161054b565b611420611edc565b611428611fb1565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009c939b5091995046985030975095509350915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290526114a98361193b565b91509150915091565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052906112cf83612002565b61150c611c5b565b611515826118e0565b600061152083611c09565b60028101546003820154919250908361153983836130c6565b111582828690919261156f5760405163555a499960e11b815260048101939093526024830191909152604482015260640161054b565b50505060018301849055604051849086907f850b5f3a1167567889ff23ccba717cf63dc8e533b3ce66ebe7f9036ea50d397490600090a35050505050565b6115b5611c5b565b6115be816118e0565b60006115c982611c09565b60068101849055604051909150839083907ff467a58694cff42eecfd79cfba75e4ff7d2f044dac2f3702a4c2cd782a5e351190600090a3505050565b61160d611c5b565b6001600160a01b038116611650576040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526000600482015260240161054b565b61165981611e49565b50565b611664611c5b565b805161166f906118e0565b600061167e8260000151611c09565b600060808401819052909150806116948461146f565b9150915081849061170657604080517f76fcd6d60000000000000000000000000000000000000000000000000000000081528251600482015260208301516001600160a01b0316602482015290820151604482015260608201516064820152608090910151608482015260a40161054b565b5080516001600160a01b039081166000908152600985016020908152604080832083905580850180518452600788018352818420805473ffffffffffffffffffffffffffffffffffffffff1916905580518452600b88018352818420849055828601518452600a8801835281842084905585519094168352600c87018252808320839055925182526008860190529081208054600192906117b69084906bffffffffffffffffffffffff166130d9565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508260000160050160008154809291906117fc906130fd565b9190505550806040015181600001516001600160a01b031684600001600001547fee56310501c49a670570d1edf7adfbe3fb90b4ae92c631470d3d4b059b7ab7a7846020015160405161185191815260200190565b60405180910390a450505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0080547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016118da576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b6118e981611d4e565b819061190b57604051632d2a698160e21b815260040161054b91815260200190565b5061191581611d6d565b819061193757604051632d2a698160e21b815260040161054b91815260200190565b5050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290526114a98361201e565b6040805160a0808201835260008083526020808401829052838501829052606080850183905260809485018390528551938401865282845283820183815284870184815291850184815285870194909452958801519283905293870151835286015190925284516001600160a01b03169092526119f190611d4e565b600090611a12576040516302a4083360e41b815260040161054b919061309e565b508051611a1e90611d4e565b600190611a3f576040516302a4083360e41b815260040161054b919061309e565b5060208101516002906001600160a01b0316611a6f576040516302a4083360e41b815260040161054b919061309e565b506000611a7f8260000151611c09565b6004810154815491925060009060ff16611ad0576040517f26ace5c300000000000000000000000000000000000000000000000000000000815260048101929092521515602482015260440161054b565b505060a0840151428111611b13576040517f697d517d00000000000000000000000000000000000000000000000000000000815260040161054b91815260200190565b5060007f8fbd59cffaeee96fb33d5c90d61a05b296d2974d6b6a6962a14125fd85a1b4c48560200151866040015187608001518860a001518960600151604051602001611b969695949392919095865260208601949094526040850192909252606084015260808301526bffffffffffffffffffffffff1660a082015260c00190565b6040516020818303038152906040529050611bcc81858460000160040160019054906101000a90046001600160a01b0316611ccf565b611c02576040517fd1cc120200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b600080611c146121c8565b9050806000611c2285611d6d565b8152602001908152602001600020915050919050565b611c406121f6565b6116598161225d565b611c516121f6565b6119378282612265565b33611c8d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614611146576040517f118cdaa700000000000000000000000000000000000000000000000000000000815233600482015260240161054b565b600080611ce285805190602001206122d8565b9050611cef838286612320565b9150505b9392505050565b611d048183612382565b6001816000016005016000828254611d1c91906130c6565b90915550505050565b60008083830184811015611d40576000809250925050611d47565b6001925090505b9250929050565b600081600003611d6057506000919050565b506001919050565b919050565b600080611d786121c8565b60009384526001016020525050604090205490565b6000611d976121c8565b9050600081600201546001611dac91906130c6565b60008181526020849052604081206004810180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038e1602179055600181018a9055878155600280820188905560038201879055600682018a905585018054939450909291611e2683613114565b909155505050600094855260019091016020526040909320929092555050505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b600080611ed26121c8565b6002015492915050565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10280546060917fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10091611f2d9061312e565b80601f0160208091040260200160405190810160405280929190818152602001828054611f599061312e565b8015611fa65780601f10611f7b57610100808354040283529160200191611fa6565b820191906000526020600020905b815481529060010190602001808311611f8957829003601f168201915b505050505091505090565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10380546060917fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10091611f2d9061312e565b60008061200d6121c8565b600093845260205250506040902090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260208301516001600160a01b031615801561206c57506060830151155b801561207a57506040830151155b156120b95750506040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529092909150565b60006120c36121c8565b845160009081526001820160208181526040808420548452908490528220608088015193945092849183918290156120ff578960800151612102565b89515b815260200190815260200160002054815260200190815260200160002090506000806001600160a01b031687602001516001600160a01b03161461214b575060208601516121b1565b60608701511561217a5750606086015160009081526007830160205260409020546001600160a01b03166121b1565b6040870151156121b157506040808701516000908152600a8401602090815282822054825260078501905220546001600160a01b03165b6121bb8183612477565b9550955050505050915091565b6000806104b660017f04bdbdc4307cce9e40fe195fd3bd1e3c1c204492d1ed6f443150de8aa0bc48d0612fc1565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16611146576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61160d6121f6565b61226d6121f6565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1007fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1026122b984826131af565b50600381016122c883826131af565b5060008082556001909101555050565b60006104b66122e5612545565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b600080600061232f858561254f565b509092509050600081600381111561234957612349613088565b1480156123675750856001600160a01b0316826001600160a01b0316145b80612378575061237886868661259c565b9695505050505050565b6040818101805183516001600160a01b03908116600090815260098701602090815285822093909355855184518252600788018452858220805473ffffffffffffffffffffffffffffffffffffffff19169190931617909155818501805184518352600b8801845285832055835190518252600a87018352848220559151825260088501905290812080546001929061242a9084906bffffffffffffffffffffffff166130d9565b82546bffffffffffffffffffffffff9182166101009390930a92830291909202199091161790555060a081015190516001600160a01b03166000908152600c909201602052604090912055565b6040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a0808701859052875195860188528486528584018581528689018681529387018681529287018681529187018681526001600160a01b038c1680885260098c0187528a8820548087528852600b8c0187528a8820549092528451875260088b018652898720546bffffffffffffffffffffffff1690935280875289549091528452600c88019092529482205490529251611d4057600092509050611d47565b600061136e6126be565b600080600083516041036125895760208401516040850151606086015160001a61257b88828585612732565b955095509550505050612595565b50508151600091506002905b9250925092565b6000806000856001600160a01b031685856040516024016125be92919061326e565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1626ba7e0000000000000000000000000000000000000000000000000000000017905251612621919061328f565b600060405180830381855afa9150503d806000811461265c576040519150601f19603f3d011682016040523d82523d6000602084013e612661565b606091505b509150915081801561267557506020815110155b8015612378575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906126b390830160209081019084016132ab565b149695505050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6126e9612801565b6126f161287d565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561276d57506000915060039050826127f7565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156127c1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127ed575060009250600191508290506127f7565b9250600091508190505b9450945094915050565b60007fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1008161282d611edc565b80519091501561284557805160209091012092915050565b81548015612854579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b60007fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100816128a9611fb1565b8051909150156128c157805160209091012092915050565b60018201548015612854579392505050565b6000602082840312156128e557600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611cf357600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561294e5761294e612915565b60405290565b80356001600160a01b0381168114611d6857600080fd5b600060a0828403121561297d57600080fd5b60405160a0810167ffffffffffffffff811182821017156129a0576129a0612915565b604052823581529050806129b660208401612954565b60208201526040838101359082015260608084013590820152608092830135920191909152919050565b600060c082840312156129f257600080fd5b6129fa61292b565b9050612a0582612954565b8152602082810135908201526040808301359082015260608201356bffffffffffffffffffffffff81168114612a3a57600080fd5b60608201526080828101359082015260a09182013591810191909152919050565b600082601f830112612a6c57600080fd5b81356020830160008067ffffffffffffffff841115612a8d57612a8d612915565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff82111715612abc57612abc612915565b604052838152905080828401871015612ad457600080fd5b838360208301376000602085830101528094505050505092915050565b60008060006101808486031215612b0757600080fd5b612b11858561296b565b9250612b208560a086016129e0565b915061016084013567ffffffffffffffff811115612b3d57600080fd5b612b4986828701612a5b565b9150509250925092565b600080600060608486031215612b6857600080fd5b833567ffffffffffffffff811115612b7f57600080fd5b612b8b86828701612a5b565b935050602084013567ffffffffffffffff811115612ba857600080fd5b612bb486828701612a5b565b925050612bc360408501612954565b90509250925092565b600060208284031215612bde57600080fd5b5035919050565b6000806000806101a08587031215612bfc57600080fd5b612c0686866129e0565b935060c085013567ffffffffffffffff811115612c2257600080fd5b612c2e87828801612a5b565b935050612c3e8660e0870161296b565b915061018085013567ffffffffffffffff811115612c5b57600080fd5b612c6787828801612a5b565b91505092959194509250565b600080600060608486031215612c8857600080fd5b505081359360208301359350604090920135919050565b60008060008060008060c08789031215612cb857600080fd5b612cc187612954565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060408385031215612cfc57600080fd5b82359150612d0c60208401612954565b90509250929050565b600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151151560808301526001600160a01b0360a08401511660a083015260c0830151612d7560c084018262ffffff169052565b5060e083015160e083015261010083015161010083015292915050565b60005b83811015612dad578181015183820152602001612d95565b50506000910152565b60008151808452612dce816020860160208601612d92565b601f01601f19169290920160200192915050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201526000612e1d60e0830189612db6565b8281036040840152612e2f8189612db6565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015612e85578351835260209384019390920191600101612e67565b50909b9a5050505050505050505050565b600060a08284031215612ea857600080fd5b611cf3838361296b565b821515815260e08101611cf360208301846001600160a01b03815116825260208101516020830152604081015160408301526bffffffffffffffffffffffff60608201511660608301526080810151608083015260a081015160a08301525050565b60008060408385031215612f2757600080fd5b50508035926020909101359150565b600060208284031215612f4857600080fd5b611cf382612954565b60c081016104b682846001600160a01b03815116825260208101516020830152604081015160408301526bffffffffffffffffffffffff60608201511660608301526080810151608083015260a081015160a08301525050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104b6576104b6612fab565b610180810161302f82856001600160a01b03815116825260208101516020830152604081015160408301526bffffffffffffffffffffffff60608201511660608301526080810151608083015260a081015160a08301525050565b82516001600160a01b031660c0830152602083015160e0830152604083015161010083015260608301516bffffffffffffffffffffffff16610120830152608083015161014083015260a0830151610160830152611cf3565b634e487b7160e01b600052602160045260246000fd5b60208101600383106130c057634e487b7160e01b600052602160045260246000fd5b91905290565b808201808211156104b6576104b6612fab565b6bffffffffffffffffffffffff81811683821601908111156104b6576104b6612fab565b60008161310c5761310c612fab565b506000190190565b6000600019820361312757613127612fab565b5060010190565b600181811c9082168061314257607f821691505b60208210810361316257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561081257806000526020600020601f840160051c8101602085101561318f5750805b601f840160051c820191505b81811015611c02576000815560010161319b565b815167ffffffffffffffff8111156131c9576131c9612915565b6131dd816131d7845461312e565b84613168565b6020601f82116001811461321157600083156131f95750848201515b600019600385901b1c1916600184901b178455611c02565b600084815260208120601f198516915b828110156132415787850151825560209485019460019092019101613221565b508482101561325f5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b8281526040602082015260006132876040830184612db6565b949350505050565b600082516132a1818460208701612d92565b9190910192915050565b6000602082840312156132bd57600080fd5b505191905056fea26469706673582212203a3b384d606850c8c0a04f9e38889c5848761d68325bdda4205f156d7dd59bb764736f6c634300081c0033",
  "deployedBytecode": "0x60806040526004361061015f5760003560e01c80637916692c116100c05780638da5cb5b11610074578063d53175b711610059578063d53175b7146103c3578063f2fde38b146103e3578063f8a7e7911461040357600080fd5b80638da5cb5b1461035c578063ca55d6e4146103a357600080fd5b806384b0196e116100a557806384b0196e146102e6578063898c2bd71461030e5780638d5f464d1461033c57600080fd5b80637916692c146102965780637f4e4849146102c357600080fd5b80634f2f2ae111610117578063715018a6116100fc578063715018a614610241578063743790ed1461025657806375b83e5e1461027657600080fd5b80634f2f2ae1146102015780636608ef421461022157600080fd5b8063077f224a11610148578063077f224a146101ae5780630b07a3d1146101ce57806348158649146101ee57600080fd5b806301ffc9a714610164578063061e960814610199575b600080fd5b34801561017057600080fd5b5061018461017f3660046128d3565b610423565b60405190151581526020015b60405180910390f35b6101ac6101a7366004612af1565b6104bc565b005b3480156101ba57600080fd5b506101ac6101c9366004612b53565b610817565b3480156101da57600080fd5b506101ac6101e9366004612bcc565b610977565b6101ac6101fc366004612be5565b6109d4565b34801561020d57600080fd5b506101ac61021c366004612c73565b610e74565b34801561022d57600080fd5b506101ac61023c366004612c9f565b610f76565b34801561024d57600080fd5b506101ac611134565b34801561026257600080fd5b506101ac610271366004612ce9565b611148565b34801561028257600080fd5b506101ac610291366004612bcc565b611223565b3480156102a257600080fd5b506102b66102b1366004612bcc565b61127d565b6040516101909190612d15565b3480156102cf57600080fd5b506102d8611364565b604051908152602001610190565b3480156102f257600080fd5b506102fb611373565b6040516101909796959493929190612de2565b34801561031a57600080fd5b5061032e610329366004612e96565b61146f565b604051610190929190612eb2565b34801561034857600080fd5b506102b6610357366004612bcc565b6114b2565b34801561036857600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b039091168152602001610190565b3480156103af57600080fd5b506101ac6103be366004612f14565b611504565b3480156103cf57600080fd5b506101ac6103de366004612f14565b6115ad565b3480156103ef57600080fd5b506101ac6103fe366004612f36565b611605565b34801561040f57600080fd5b506101ac61041e366004612e96565b61165c565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f88ecd0bd0000000000000000000000000000000000000000000000000000000014806104b657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6104c461185f565b6104d182608001516118e0565b6000806104dd8561193b565b606080870151908201519294509092506bffffffffffffffffffffffff80821690831610610554576040517fed2c5af90000000000000000000000000000000000000000000000000000000081526bffffffffffffffffffffffff9283166004820152911660248201526044015b60405180910390fd5b50506080808501519082015190811461058357604051632d2a698160e21b815260040161054b91815260200190565b5061058e8484611975565b84826105fb57604080517f76fcd6d60000000000000000000000000000000000000000000000000000000081528251600482015260208301516001600160a01b0316602482015290820151604482015260608201516064820152608090910151608482015260a40161054b565b50600061060b8560800151611c09565b6004810154608087015191925060ff16610654576040517f35b79ca400000000000000000000000000000000000000000000000000000000815260040161054b91815260200190565b5060a085015142811015610697576040517f697d517d00000000000000000000000000000000000000000000000000000000815260040161054b91815260200190565b508460400151856080015186600001516001600160a01b03167f6753198d54b2e4642b1a6e2511b6c7431bd7230eb4733b64fcd12dbf3dc30a07886040516106df9190612f51565b60405180910390a46006810154156107e6576006810154348181101561073a576040517f58c72c450000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161054b565b5050600061076f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b60068301546040516001600160a01b039290921691600081818185875af1925050503d80600081146107bd576040519150601f19603f3d011682016040523d82523d6000602084013e6107c2565b606091505b50509050806107e4576040516328e7763f60e01b815260040160405180910390fd5b505b50505061081260017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156108625750825b905060008267ffffffffffffffff16600114801561087f5750303b155b90508115801561088d575080155b156108c4576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561090f57845468ff00000000000000001916680100000000000000001785555b61091886611c38565b6109228888611c49565b831561096d57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b61097f611c5b565b610988816118e0565b600061099382611c09565b60048101805460ff1916600117905560405190915082907f12ba12d5905656d674e5e6eb43518e8037aa5c2d412275fed1d6c87b3579f8f490600090a25050565b6109dc61185f565b6109e984608001516118e0565b6040805160a08082018352600080835260208084018290528385018290526060808501839052608094850183905285519384018652828452838201838152848701848152918501848152858701859052968b015190965293890151835288015190925286516001600160a01b031690925280610a648361193b565b9150915081158190610a8a576040516334bc6c5160e11b815260040161054b9190612f51565b5050600060208301819052905080610aa18361193b565b9150915081158190610ac7576040516334bc6c5160e11b815260040161054b9190612f51565b5050600060608301819052905080610ade8361193b565b9150915081158190610b04576040516334bc6c5160e11b815260040161054b9190612f51565b50505050610b128484611975565b6000610b218560800151611c09565b9050600080610b2f8561193b565b91509150600082610b41576000610b47565b60028401545b9050600083610b57576000610b5d565b60038501545b6001860154610b6c9190612fc1565b9050803481811015610bb3576040517f58c72c450000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161054b565b5060009050610bc28334612fc1565b90506000610bf77f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610c41576040519150601f19603f3d011682016040523d82523d6000602084013e610c46565b606091505b5050905080610c68576040516328e7763f60e01b815260040160405180910390fd5b508415610dfb57895184516001600160a01b03918216911603610cb7576040517f158f8ec200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8351604080517f216da2d1b8943b28c3c65d1a24b58fdf6dfd051d8f0667966ebf5d8ae37ceb7660208201526001600160a01b0390921682820152805180830382018152606090920190528451610d119082908a90611ccf565b610d47576040517fd1cc120200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84516040516000916001600160a01b03169086908381818185875af1925050503d8060008114610d93576040519150601f19603f3d011682016040523d82523d6000602084013e610d98565b606091505b5050905080610dba576040516328e7763f60e01b815260040160405180910390fd5b505089608001517fe15b8c6c90311f7f1ef7acd0c591854454b7ce3e8f9b781b840bddb4b2df2136858c604051610df2929190612fd4565b60405180910390a25b610e058a87611cfa565b85546040517fbe3ff53fa4b2c981ecee65725c32db419428aa34c21d80a35e2f62295b9ffaf190610e37908d90612f51565b60405180910390a2505050505050610e6e60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50505050565b610e7c611c5b565b610e85816118e0565b6000610e9082611c09565b9050600080610e9f8686611d25565b9092509050858583610ee6576040517f7b74c8910000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161054b565b505060018301548690869080841115610f235760405163555a499960e11b815260048101939093526024830191909152604482015260640161054b565b5050506002830186905560038301859055604080518781526020810187905285917e640530575cb3beb0ff2a19a68ca7e85232d0defd808bb6945c8250a0e6c828910160405180910390a2505050505050565b610f7e611c5b565b856001600160a01b038116610fcb576040517fc4124c060000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260240161054b565b50610fd583611d4e565b600190610ff6576040516302a4083360e41b815260040161054b919061309e565b5061100083611d6d565b83901561103c576040517f143dc3f800000000000000000000000000000000000000000000000000000000815260040161054b91815260200190565b5060008061104a8484611d25565b9092509050838383611091576040517f7b74c8910000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161054b565b508490508388808411156110c95760405163555a499960e11b815260048101939093526024830191909152604482015260640161054b565b5050506110da888888888888611d8d565b6040805187815260208101869052908101849052859088906001600160a01b038b16907fffc21a23b715653050f8085f1c0b2ad389452156c248d4483aa814cb417541309060600160405180910390a45050505050505050565b61113c611c5b565b6111466000611e49565b565b611150611c5b565b611159826118e0565b600061116483611c09565b9050816001600160a01b0381166111b3576040517fc4124c060000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260240161054b565b506004810180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b0385169081029190911790915560405184907fd41d966d7fbc3eb366c5a0e0abea2aa1b2ceba4b78ee1e0314bf47dfb19011f290600090a3505050565b61122b611c5b565b611234816118e0565b600061123f82611c09565b60048101805460ff1916905560405190915082907f3e326791c535b99fa4690e49e159504f5930c05068dce433b45279165d51f73890600090a25050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052906112cf83611c09565b6040805161012081018252825481526001830154602082015260028301549181019190915260038201546060820152600482015460ff8116151560808301526101008082046001600160a01b031660a0840152750100000000000000000000000000000000000000000090910462ffffff1660c0830152600583015460e0830152600690920154918101919091529392505050565b600061136e611ec7565b905090565b600060608082808083817fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10080549091501580156113b257506001810154155b611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4549503731323a20556e696e697469616c697a65640000000000000000000000604482015260640161054b565b611420611edc565b611428611fb1565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009c939b5091995046985030975095509350915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290526114a98361193b565b91509150915091565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052906112cf83612002565b61150c611c5b565b611515826118e0565b600061152083611c09565b60028101546003820154919250908361153983836130c6565b111582828690919261156f5760405163555a499960e11b815260048101939093526024830191909152604482015260640161054b565b50505060018301849055604051849086907f850b5f3a1167567889ff23ccba717cf63dc8e533b3ce66ebe7f9036ea50d397490600090a35050505050565b6115b5611c5b565b6115be816118e0565b60006115c982611c09565b60068101849055604051909150839083907ff467a58694cff42eecfd79cfba75e4ff7d2f044dac2f3702a4c2cd782a5e351190600090a3505050565b61160d611c5b565b6001600160a01b038116611650576040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526000600482015260240161054b565b61165981611e49565b50565b611664611c5b565b805161166f906118e0565b600061167e8260000151611c09565b600060808401819052909150806116948461146f565b9150915081849061170657604080517f76fcd6d60000000000000000000000000000000000000000000000000000000081528251600482015260208301516001600160a01b0316602482015290820151604482015260608201516064820152608090910151608482015260a40161054b565b5080516001600160a01b039081166000908152600985016020908152604080832083905580850180518452600788018352818420805473ffffffffffffffffffffffffffffffffffffffff1916905580518452600b88018352818420849055828601518452600a8801835281842084905585519094168352600c87018252808320839055925182526008860190529081208054600192906117b69084906bffffffffffffffffffffffff166130d9565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508260000160050160008154809291906117fc906130fd565b9190505550806040015181600001516001600160a01b031684600001600001547fee56310501c49a670570d1edf7adfbe3fb90b4ae92c631470d3d4b059b7ab7a7846020015160405161185191815260200190565b60405180910390a450505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0080547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016118da576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b6118e981611d4e565b819061190b57604051632d2a698160e21b815260040161054b91815260200190565b5061191581611d6d565b819061193757604051632d2a698160e21b815260040161054b91815260200190565b5050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290526114a98361201e565b6040805160a0808201835260008083526020808401829052838501829052606080850183905260809485018390528551938401865282845283820183815284870184815291850184815285870194909452958801519283905293870151835286015190925284516001600160a01b03169092526119f190611d4e565b600090611a12576040516302a4083360e41b815260040161054b919061309e565b508051611a1e90611d4e565b600190611a3f576040516302a4083360e41b815260040161054b919061309e565b5060208101516002906001600160a01b0316611a6f576040516302a4083360e41b815260040161054b919061309e565b506000611a7f8260000151611c09565b6004810154815491925060009060ff16611ad0576040517f26ace5c300000000000000000000000000000000000000000000000000000000815260048101929092521515602482015260440161054b565b505060a0840151428111611b13576040517f697d517d00000000000000000000000000000000000000000000000000000000815260040161054b91815260200190565b5060007f8fbd59cffaeee96fb33d5c90d61a05b296d2974d6b6a6962a14125fd85a1b4c48560200151866040015187608001518860a001518960600151604051602001611b969695949392919095865260208601949094526040850192909252606084015260808301526bffffffffffffffffffffffff1660a082015260c00190565b6040516020818303038152906040529050611bcc81858460000160040160019054906101000a90046001600160a01b0316611ccf565b611c02576040517fd1cc120200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b600080611c146121c8565b9050806000611c2285611d6d565b8152602001908152602001600020915050919050565b611c406121f6565b6116598161225d565b611c516121f6565b6119378282612265565b33611c8d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614611146576040517f118cdaa700000000000000000000000000000000000000000000000000000000815233600482015260240161054b565b600080611ce285805190602001206122d8565b9050611cef838286612320565b9150505b9392505050565b611d048183612382565b6001816000016005016000828254611d1c91906130c6565b90915550505050565b60008083830184811015611d40576000809250925050611d47565b6001925090505b9250929050565b600081600003611d6057506000919050565b506001919050565b919050565b600080611d786121c8565b60009384526001016020525050604090205490565b6000611d976121c8565b9050600081600201546001611dac91906130c6565b60008181526020849052604081206004810180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038e1602179055600181018a9055878155600280820188905560038201879055600682018a905585018054939450909291611e2683613114565b909155505050600094855260019091016020526040909320929092555050505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b600080611ed26121c8565b6002015492915050565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10280546060917fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10091611f2d9061312e565b80601f0160208091040260200160405190810160405280929190818152602001828054611f599061312e565b8015611fa65780601f10611f7b57610100808354040283529160200191611fa6565b820191906000526020600020905b815481529060010190602001808311611f8957829003601f168201915b505050505091505090565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10380546060917fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10091611f2d9061312e565b60008061200d6121c8565b600093845260205250506040902090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260208301516001600160a01b031615801561206c57506060830151155b801561207a57506040830151155b156120b95750506040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529092909150565b60006120c36121c8565b845160009081526001820160208181526040808420548452908490528220608088015193945092849183918290156120ff578960800151612102565b89515b815260200190815260200160002054815260200190815260200160002090506000806001600160a01b031687602001516001600160a01b03161461214b575060208601516121b1565b60608701511561217a5750606086015160009081526007830160205260409020546001600160a01b03166121b1565b6040870151156121b157506040808701516000908152600a8401602090815282822054825260078501905220546001600160a01b03165b6121bb8183612477565b9550955050505050915091565b6000806104b660017f04bdbdc4307cce9e40fe195fd3bd1e3c1c204492d1ed6f443150de8aa0bc48d0612fc1565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16611146576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61160d6121f6565b61226d6121f6565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1007fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1026122b984826131af565b50600381016122c883826131af565b5060008082556001909101555050565b60006104b66122e5612545565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b600080600061232f858561254f565b509092509050600081600381111561234957612349613088565b1480156123675750856001600160a01b0316826001600160a01b0316145b80612378575061237886868661259c565b9695505050505050565b6040818101805183516001600160a01b03908116600090815260098701602090815285822093909355855184518252600788018452858220805473ffffffffffffffffffffffffffffffffffffffff19169190931617909155818501805184518352600b8801845285832055835190518252600a87018352848220559151825260088501905290812080546001929061242a9084906bffffffffffffffffffffffff166130d9565b82546bffffffffffffffffffffffff9182166101009390930a92830291909202199091161790555060a081015190516001600160a01b03166000908152600c909201602052604090912055565b6040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a0808701859052875195860188528486528584018581528689018681529387018681529287018681529187018681526001600160a01b038c1680885260098c0187528a8820548087528852600b8c0187528a8820549092528451875260088b018652898720546bffffffffffffffffffffffff1690935280875289549091528452600c88019092529482205490529251611d4057600092509050611d47565b600061136e6126be565b600080600083516041036125895760208401516040850151606086015160001a61257b88828585612732565b955095509550505050612595565b50508151600091506002905b9250925092565b6000806000856001600160a01b031685856040516024016125be92919061326e565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1626ba7e0000000000000000000000000000000000000000000000000000000017905251612621919061328f565b600060405180830381855afa9150503d806000811461265c576040519150601f19603f3d011682016040523d82523d6000602084013e612661565b606091505b509150915081801561267557506020815110155b8015612378575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906126b390830160209081019084016132ab565b149695505050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6126e9612801565b6126f161287d565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561276d57506000915060039050826127f7565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156127c1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127ed575060009250600191508290506127f7565b9250600091508190505b9450945094915050565b60007fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1008161282d611edc565b80519091501561284557805160209091012092915050565b81548015612854579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b60007fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100816128a9611fb1565b8051909150156128c157805160209091012092915050565b60018201548015612854579392505050565b6000602082840312156128e557600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611cf357600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561294e5761294e612915565b60405290565b80356001600160a01b0381168114611d6857600080fd5b600060a0828403121561297d57600080fd5b60405160a0810167ffffffffffffffff811182821017156129a0576129a0612915565b604052823581529050806129b660208401612954565b60208201526040838101359082015260608084013590820152608092830135920191909152919050565b600060c082840312156129f257600080fd5b6129fa61292b565b9050612a0582612954565b8152602082810135908201526040808301359082015260608201356bffffffffffffffffffffffff81168114612a3a57600080fd5b60608201526080828101359082015260a09182013591810191909152919050565b600082601f830112612a6c57600080fd5b81356020830160008067ffffffffffffffff841115612a8d57612a8d612915565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff82111715612abc57612abc612915565b604052838152905080828401871015612ad457600080fd5b838360208301376000602085830101528094505050505092915050565b60008060006101808486031215612b0757600080fd5b612b11858561296b565b9250612b208560a086016129e0565b915061016084013567ffffffffffffffff811115612b3d57600080fd5b612b4986828701612a5b565b9150509250925092565b600080600060608486031215612b6857600080fd5b833567ffffffffffffffff811115612b7f57600080fd5b612b8b86828701612a5b565b935050602084013567ffffffffffffffff811115612ba857600080fd5b612bb486828701612a5b565b925050612bc360408501612954565b90509250925092565b600060208284031215612bde57600080fd5b5035919050565b6000806000806101a08587031215612bfc57600080fd5b612c0686866129e0565b935060c085013567ffffffffffffffff811115612c2257600080fd5b612c2e87828801612a5b565b935050612c3e8660e0870161296b565b915061018085013567ffffffffffffffff811115612c5b57600080fd5b612c6787828801612a5b565b91505092959194509250565b600080600060608486031215612c8857600080fd5b505081359360208301359350604090920135919050565b60008060008060008060c08789031215612cb857600080fd5b612cc187612954565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060408385031215612cfc57600080fd5b82359150612d0c60208401612954565b90509250929050565b600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151151560808301526001600160a01b0360a08401511660a083015260c0830151612d7560c084018262ffffff169052565b5060e083015160e083015261010083015161010083015292915050565b60005b83811015612dad578181015183820152602001612d95565b50506000910152565b60008151808452612dce816020860160208601612d92565b601f01601f19169290920160200192915050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201526000612e1d60e0830189612db6565b8281036040840152612e2f8189612db6565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015612e85578351835260209384019390920191600101612e67565b50909b9a5050505050505050505050565b600060a08284031215612ea857600080fd5b611cf3838361296b565b821515815260e08101611cf360208301846001600160a01b03815116825260208101516020830152604081015160408301526bffffffffffffffffffffffff60608201511660608301526080810151608083015260a081015160a08301525050565b60008060408385031215612f2757600080fd5b50508035926020909101359150565b600060208284031215612f4857600080fd5b611cf382612954565b60c081016104b682846001600160a01b03815116825260208101516020830152604081015160408301526bffffffffffffffffffffffff60608201511660608301526080810151608083015260a081015160a08301525050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104b6576104b6612fab565b610180810161302f82856001600160a01b03815116825260208101516020830152604081015160408301526bffffffffffffffffffffffff60608201511660608301526080810151608083015260a081015160a08301525050565b82516001600160a01b031660c0830152602083015160e0830152604083015161010083015260608301516bffffffffffffffffffffffff16610120830152608083015161014083015260a0830151610160830152611cf3565b634e487b7160e01b600052602160045260246000fd5b60208101600383106130c057634e487b7160e01b600052602160045260246000fd5b91905290565b808201808211156104b6576104b6612fab565b6bffffffffffffffffffffffff81811683821601908111156104b6576104b6612fab565b60008161310c5761310c612fab565b506000190190565b6000600019820361312757613127612fab565b5060010190565b600181811c9082168061314257607f821691505b60208210810361316257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561081257806000526020600020601f840160051c8101602085101561318f5750805b601f840160051c820191505b81811015611c02576000815560010161319b565b815167ffffffffffffffff8111156131c9576131c9612915565b6131dd816131d7845461312e565b84613168565b6020601f82116001811461321157600083156131f95750848201515b600019600385901b1c1916600184901b178455611c02565b600084815260208120601f198516915b828110156132415787850151825560209485019460019092019101613221565b508482101561325f5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b8281526040602082015260006132876040830184612db6565b949350505050565b600082516132a1818460208701612d92565b9190910192915050565b6000602082840312156132bd57600080fd5b505191905056fea26469706673582212203a3b384d606850c8c0a04f9e38889c5848761d68325bdda4205f156d7dd59bb764736f6c634300081c0033",
  "devdoc": {
    "custom:security-contact": "sirt@peeramid.xyz",
    "details": "This contract implements various functions related to the management of domain names and registration records.",
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "DomainActivated(bytes32)": {
        "details": "Emitted when a domain is activated.",
        "params": {
          "domainName": "The name of the activated domain."
        }
      },
      "DomainDeactivated(bytes32)": {
        "details": "Emitted when a domain is deactivated.",
        "params": {
          "domainName": "The name of the deactivated domain."
        }
      },
      "DomainFeeChanged(bytes32,uint256)": {
        "details": "Emitted when the fee for a domain is changed.",
        "params": {
          "domainName": "The name of the domain.",
          "newFee": "The new fee for the domain."
        }
      },
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "InitializedDomain(address,uint256,bytes32,uint256,uint256,uint256)": {
        "details": "Initializes a new domain with the specified parameters.",
        "params": {
          "domainName": "The name of the domain.",
          "fee": "The fee required for registration in the domain.",
          "referralDiscount": "The discount for referrals in the domain.",
          "referrerReward": "The reward for referring new registrations to the domain.",
          "registrar": "The address of the registrar for the domain."
        }
      },
      "ReferralProgramChanged(bytes32,uint256,uint256)": {
        "details": "Emitted when the referral program for a domain is changed.",
        "params": {
          "discount": "The referral discount amount.",
          "domainName": "The domain name.",
          "reward": "The referral reward amount."
        }
      },
      "Referred((address,bytes32,bytes32,uint96,bytes32,uint256),(address,bytes32,bytes32,uint96,bytes32,uint256),bytes32)": {
        "details": "Emitted when a user is referred.",
        "params": {
          "domainName": "The domain name.",
          "newRecord": "The new record.",
          "refferrer": "The record of the referrer."
        }
      },
      "Registered(bytes32,(address,bytes32,bytes32,uint96,bytes32,uint256))": {
        "details": "Emitted when a domain is registered.",
        "params": {
          "NewRecord": "The new record.",
          "domainName": "The domain name."
        }
      },
      "RegistrarChanged(bytes32,address)": {
        "details": "Emitted when a registrar change is requested for a domain.",
        "params": {
          "domainName": "The name of the domain.",
          "registrar": "The address of the new registrar."
        }
      },
      "RenewalFeeChanged(bytes32,uint256)": {
        "details": "Emitted when a domain renewal fee is changed.",
        "params": {
          "domainName": "The domain name.",
          "newFee": "The new renewal fee."
        }
      },
      "Renewed(address,bytes32,bytes32,(address,bytes32,bytes32,uint96,bytes32,uint256))": {
        "details": "Emitted when a user record is renewed.",
        "params": {
          "domainName": "The domain name.",
          "id": "The ID of the record.",
          "newRecord": "The new record.",
          "wallet": "The address of the wallet."
        }
      },
      "fundsWithdawn(uint256,address)": {
        "details": "returns price for registering name"
      },
      "nameDeleted(bytes32,address,bytes32,bytes32)": {
        "details": "Emitted when a name is deleted.",
        "params": {
          "domainName": "The domain name.",
          "id": "The ID of the name.",
          "name": "The name.",
          "wallet": "The address of the wallet."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "activateDomain(bytes32)": {
        "details": "Activates LibMultipass.Domain name Requirements:  msg.sender is Owner  Emits an {DomainActivated} event."
      },
      "changeFee(bytes32,uint256)": {
        "details": "Changes registrar address Requirements:  msg.sender is Owner  Emits an {DomainFeeChanged} event."
      },
      "changeReferralProgram(uint256,uint256,bytes32)": {
        "details": "executes all pending changes to LibMultipass.Domain that fulfill TTL Requirements:  domainName must be set  referrerFeeShare+referralDiscount cannot be larger than 2^32  Emits an {ReferralProgramChangeRequested} event."
      },
      "changeRegistrar(bytes32,address)": {
        "details": "Changes registrar address Requirements:  msg.sender is Owner  Emits an {RegistrarChangeRequested} event."
      },
      "changeRenewalFee(uint256,bytes32)": {
        "details": "changes renewal fee for domain Requirements:  domainName must be set  fee must be set  Emits an {RenewalFeeChangeRequested} event."
      },
      "deactivateDomain(bytes32)": {
        "details": "Deactivates LibMultipass.Domain name Deactivated LibMultipass.Domain cannot mutate names and will return zeros Requirements:  msg.sender is Owner OR registrar  Emits an {DomainDeactivated} event."
      },
      "deleteName((bytes32,address,bytes32,bytes32,bytes32))": {
        "details": "deletes name Requirements:  msg.sender is Owner  Emits an {DomainTTLChangeRequested} event."
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "getContractState()": {
        "details": "returns contract state variables",
        "returns": {
          "_0": "(s_numDomains)"
        }
      },
      "getDomainState(bytes32)": {
        "details": "returns LibMultipass.Domain state variables",
        "params": {
          "domainName": "name of the LibMultipass.Domain"
        },
        "returns": {
          "_0": "(name, fee, referrerReward, referralDiscount, isActive, registrar, ttl, registerSize)"
        }
      },
      "getDomainStateById(uint256)": {
        "details": "Retrieves the domain state by its ID.",
        "params": {
          "id": "The ID of the domain."
        },
        "returns": {
          "_0": "The domain state as a `LibMultipass.Domain` struct."
        }
      },
      "initialize(string,string,address)": {
        "params": {
          "name": "The name to initialize the contract with.",
          "owner": "The address of the owner of the contract.",
          "version": "The version to initialize the contract with."
        }
      },
      "initializeDomain(address,uint256,uint256,bytes32,uint256,uint256)": {
        "details": "Initializes new LibMultipass.Domain and configures it's parameters Requirements:  registrar is not zero  domainName is not empty  domainIndex is either zero(auto assign) or can be one of preoccupied LibMultipass.Domain names  domainName does not exist yet  onlyOwner  referrerReward+referralDiscount cannot be larger than fee",
        "params": {
          "domainName": "name of LibMultipass.Domain",
          "fee": "fee in base currency of network",
          "referralDiscount": "referral discount in base currency of network  Emits an {InitializedDomain} event.",
          "referrerReward": "referral fee share in base currency of network",
          "registrar": "address of registrar"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register((address,bytes32,bytes32,uint96,bytes32,uint256),bytes,(bytes32,address,bytes32,bytes32,bytes32),bytes)": {
        "details": "registers new name under LibMultipass.Domain Requirements:  all arguments must be set  domainName must be active resolveRecord for given arguments should return no LibMultipass.Record  Emits an {registered} event."
      },
      "renewRecord((bytes32,address,bytes32,bytes32,bytes32),(address,bytes32,bytes32,uint96,bytes32,uint256),bytes)": {
        "params": {
          "query": "name query",
          "record": "new record",
          "registrarSignature": "registrar signature"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "resolveRecord((bytes32,address,bytes32,bytes32,bytes32))": {
        "details": "Retrieves the resolved record for a given name query.",
        "params": {
          "query": "The name query to resolve."
        },
        "returns": {
          "_0": "A boolean indicating whether the record was found, and the resolved record."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Checks if the contract supports a given interface.",
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165."
        },
        "returns": {
          "_0": "bool True if the contract supports the given interface, false otherwise."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Multipass",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(string,string,address)": {
        "notice": "Initializes the contract with a name, version, and owner address. This function can only be called once due to the `initializer` modifier."
      },
      "renewRecord((bytes32,address,bytes32,bytes32,bytes32),(address,bytes32,bytes32,uint96,bytes32,uint256),bytes)": {
        "notice": "renews record for given query"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}